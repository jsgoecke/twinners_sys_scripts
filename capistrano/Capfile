#Capistrano file for Twinners IVR
load 'deploy' if respond_to?(:namespace) # cap2 differentiator
 
PRODUCTION_SERVERS = %w[75.101.134.104]
DEPLOYMENT_DIR = '/opt/cap_test/interactivechatsystems'
default_run_options[:pty] = true

#===#
# The required repositories
set :scm, :git

#Repo for Adhearsion, Twinners Adhearsion Project and the Stomp<->BLS Bridge
set :ahn_repository, 'git://github.com/jicksta/adhearsion.git'
set :ahn_install_dir, DEPLOYMENT_DIR + "/adhearsion"
set :twinners_repository, "git@github.com:jicksta/twinners.git"
set :twinners_install_dir, DEPLOYMENT_DIR + "/twinners"

#Repo for the runtime of BLS
set :bls_repository, "git@github.com:interactivechatsystems/bls_runtime.git"
set :bls_install_dir, DEPLOYMENT_DIR + "/bls"

#Repo that stores the configuration information for the Stomp Server
set :stompserver_repository, ""
set :stomptoserver_install_dir, DEPLOYMENT_DIR + "/stomptoserver"

#Repo for the Stomp<->Manager Bridge
set :stomptomanagerbridge_repository, "git@github.com:jicksta/stomptomanagerbridge.git"
set :stomptomanagerbridge_install_dir, DEPLOYMENT_DIR + "/stomptoblsbridge"

#Repo for the Twinners System Scripts
set :twinners_sys_scripts_repository, "git@github.com:jsgoecke/twinners_sys_scripts.git"
set :twinners_sys_scripts_install_dir, DEPLOYMENT_DIR + "/twinners_sys_scripts"
#===#

# Project-related variables
set :project_deploy_to_root, DEPLOYMENT_DIR
 
set :deploy_via, :remote_cache
 
set :ahn_deploy_to, project_deploy_to_root #+ "/pbx"
 
# Capistrano setup
#set :application, "pbx" # Why is this needed?
set :user, "ics" 
set :group, 'ics'
set :deploy_to, ahn_deploy_to
 
depend :remote, :command, "git"
depend :remote, :command, "asterisk"
depend :remote, :command, "sqlite3"
depend :remote, :directory, project_deploy_to_root
depend :remote, :directory, '/etc/asterisk'
depend :remote, :directory, '/var/lib/asterisk/sounds/interactivechatsystems'
depend :remote, :match, "ruby -v", /1\.8\.6/
depend :remote, :gem, "rails", ">= 2.0.2"
depend :remote, :gem, "haml", ">= 1.8.2"
depend :remote, :gem, "activerecord", ">= 2.0.2"
depend :remote, :gem, "activesupport", ">= 2.0.2"
depend :remote, :gem, "hoe", ">= 1.5.0"
depend :remote, :gem, "rubigen", ">= 1.1.1"
depend :remote, :gem, "log4r", ">= 1.0.5"
depend :remote, :gem, "tzinfo", ">= 0.3.7"
depend :remote, :gem, "sqlite3-ruby", ">= 1.2.1"
depend :remote, :gem, "daemons", ">= 1.0.10"
depend :remote, :gem, "stompserver", ">= 0.9.9"
 
before 'deploy', 'ahn:update'
#after 'deploy:setup', :create_ics_user
after 'deploy:setup', :create_ics_folder
after 'deploy:setup', 'ahn:init'
after 'deploy:setup', 'bls:init'
after 'deploy:setup', 'twinners_sys_scripts:init'
after 'deploy:setup', :chmod_ics_folders
 
task :create_ics_user do
  run "adduser ics"
end

task :chmod_ics_folders do
  run "chown -R ics #{DEPLOYMENT_DIR}"
  run "chgrp -R ics #{DEPLOYMENT_DIR}"
end

task :create_ics_folder do
  #run 'mkdir /opt/cap_test/twinners'
  run "chown -R #{user} #{DEPLOYMENT_DIR}"
  run "chgrp -R #{group} #{DEPLOYMENT_DIR}"
end
 
task :production do
  set :user, "root"
  set :use_sudo, "false"
  role :app, *PRODUCTION_SERVERS
end
 
before 'deploy:update', 'ahn:stop'
after 'deploy', 'ahn:start'
 
namespace :deploy do
  
  task :restart do
    # This is already handled by the before/after hooks above
  end
  
end
 
namespace :ahn do
  
  task :init do
    run "git clone #{ahn_repository} #{ahn_install_dir}"
    run "git clone #{twinners_repository} #{twinners_install_dir}"
  end
  
  task :update do
    run "git pull #{ahn_install_dir}"
    run "git pull #{twinners_install_dir}"
  end
  
  Restarter = lambda do |operation|
    action, monitor_state = case operation
      when :start : %w[ start monitor ]
      when :stop : %w[ stop unmonitor ]
    end
    run "monit #{monitor_state} ahn"
    run "#{ahn_install_dir}/bin/ahnctl #{action} #{ahn_deploy_to}/current || true"
  end
  
  task :start do
    on_rollback { Restarter[:stop] }
    Restarter[:start]
  end
  
  task :stop do
    on_rollback { Restarter[:start] }
    Restarter[:stop]
  end
  
  task :restart do
    stop
    start
  end
end

namespace :bls do

  task :init do
    run "git clone #{bls_repository} #{bls_install_dir}"
	run "mkdir #{bls_install_dir}/log"
  end

  task :update do
    run "git pull #{bls_install_dir}"
  end

  Restarter = lambda do |operation|
    action, monitor_state = case operation
      when :start : %w[ start monitor ]
      when :stop : %w[ stop unmonitor ]
    end
    run "monit #{monitor_state} ahn"
    run "/etc/init.d/bls stop"
    run "/etc/init.d/bls start"
  end

  task :start do
    on_rollback { Restarter[:stop] }
    Restarter[:start]
  end

  task :stop do
    on_rollback { Restarter[:start] }
    Restarter[:stop]
  end

  task :restart do
    stop
    start
  end
end

namespace :twinners_sys_scripts do

  task :init do
    run "git clone #{twinners_sys_scripts_repository} #{twinners_sys_scripts_install_dir}"
	run "ln -s #{twinners_sys_scripts_install_dir}/init.d/ahn /etc/init.d/ahn"
	run "ln -s #{twinners_sys_scripts_install_dir}/init.d/bls /etc/init.d/bls"
	run "ln -s #{twinners_sys_scripts_install_dir}/init.d/stompserver /etc/init.d/stompserver"
	run "ln -s #{twinners_sys_scripts_install_dir}/init.d/stomptoblsbridge /etc/init.d/stomptoblsbridge"
	run "ln -s #{twinners_sys_scripts_install_dir}/init.d/stomptomanagerbridge /etc/init.d/stomptomanagerbridge"
  end

  task :update do
    run "git pull #{twinners_sys_scripts_repository}"
  end
end

namespace :asterisk do
  task :reload do
    run "asterisk -rx reload"
  end
end
 
namespace :centos do
  
  task :update_packages do
    run "yum update"
  end
  
  namespace :monit do
    task :install do
      update_packages
      run "yum install -y monit"
    end
  end
  
  namespace :mysql do
    
    task :install do
      update_packages
      run "yum install -y mysql-server-5.0"
      run "yum install -y mysql-client-5.0"
    end
    
    task :status do
      run "/etc/init.d/mysql status"
    end
    
  end
end